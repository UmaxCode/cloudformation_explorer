AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create VPC, ALB, ASG, and subnets in Virginia (us-east-1).

Parameters:
  VPCName:
    Type: String
    Default: "MyVPC"
  ALBName:
    Type: String
    Default: "MyALB"
  InstanceType:
    Type: String
    Default: "t2.micro"
    Description: EC2 instance type for the Auto Scaling group.

Resources:
  # Create a VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPCName

  # Create public subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs "us-east-1"]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "PublicSubnet1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs "us-east-1"]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "PublicSubnet2"

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [2, !GetAZs "us-east-1"]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "PublicSubnet3"

  # Create private subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [0, !GetAZs "us-east-1"]
      Tags:
        - Key: Name
          Value: "PrivateSubnet1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select [1, !GetAZs "us-east-1"]
      Tags:
        - Key: Name
          Value: "PrivateSubnet2"

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: !Select [2, !GetAZs "us-east-1"]
      Tags:
        - Key: Name
          Value: "PrivateSubnet3"

  # Create Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: "MyInternetGateway"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # Create Route Table for Public Subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: "PublicRouteTable"

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # Associate Public Subnets with Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  # Create Security Group for ALB
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and HTTPS traffic
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: "ALBSecurityGroup"

  # Create the Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref ALBName
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: !Ref ALBName

  # Create Target Group for the ALB
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ALBName}-target-group"
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVPC
      HealthCheckProtocol: HTTP
      HealthCheckPath: "/"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2

  # Create Listener for the ALB
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # Create Launch Template for the Auto Scaling Group
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${ALBName}-launch-template"
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        ImageId: "ami-0c55b159cbfafe1f0" # Example AMI, replace with appropriate AMI ID for your region
        SecurityGroupIds:
          - !Ref ALBSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo "Hello World" > /var/www/html/index.html
            nohup python -m SimpleHTTPServer 80 &

  # Create Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 5
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        - Key: Name
          Value: "MyASGInstances"
          PropagateAtLaunch: true

Outputs:
  VPCId:
    Description: "VPC Id"
    Value: !Ref MyVPC
  ALBEndpoint:
    Description: "Application Load Balancer DNS Name"
    Value: !GetAtt ApplicationLoadBalancer.DNSName
